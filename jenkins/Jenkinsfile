pipeline {
  agent any

  options { skipDefaultCheckout(true) }

  environment {
      AWS_REGION  = 'us-east-1'
      DOCKER_HOST = 'tcp://dind:2375'
      ECR_BACKEND   = "demo-app-backend"
      ECR_FRONTEND  = "demo-app-frontend"
      SRC         = '/workspace/demo-app'
  }

  stages {
      // stage('Checkout') {
      //       environment {
      //         GIT_SSH_COMMAND = 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
      //       }
      //       steps {
      //         checkout([$class: 'GitSCM',
      //           branches: [[name: '*/main']],
      //           userRemoteConfigs: [[
      //             url: 'git@github.com:gryzril/demo-app.git',
      //             credentialsId: 'github'
      //           ]]
      //         ])
      //       }
      //     }

      stage('Set Image Tag') {
          agent any
          steps {
              script {
                // env.GIT_SHA = sh(script: 'git rev-parse --short=7 HEAD', returnStdout: true).trim()
                // env.IMAGE_TAG = "b${env.BUILD_NUMBER}-${env.GIT_SHA}"
                env.IMAGE_TAG = "temp"
              }
          }
      }

      stage('Backend unit tests') {
        steps {
          script {
            def rc = sh(returnStatus: true, script: '''
              docker run --rm -v "${SRC}:/w" -w /w python:3.12 bash -lc "
                pip install -U pip &&
                pip install -r backend/requirements.txt &&
                pytest backend/tests -q
              "
            ''')
            if (rc != 0) {
              echo 'Failure expected for now, moving on'
            }
          }
        }
      }

      stage('Run Playwright Tests') {
          steps {
            script {
                def rc = sh(returnStatus: true, script: '''
                  docker run --rm -v "${SRC}/frontend:/app" -w /app mcr.microsoft.com/playwright:v1.47.2-jammy bash -lc "
                    npm ci &&
                    npx playwright install --with-deps &&
                    npx playwright test
                  "
                ''')
              if (rc != 0) {
                echo 'Failure expected for now, moving on'
              }
            }
          }
      }

      stage('Build images') {
        steps {
          sh '''
            docker build -t backend:${IMAGE_TAG}  "${SRC}/backend"
            docker build -t frontend:${IMAGE_TAG} "${SRC}/frontend"
          '''
        }
      }

      stage('Terraform Plan') {
        environment { AWS_DEFAULT_REGION = "${AWS_REGION ?: 'us-east-1'}" }
        steps {
          withCredentials([usernamePassword(credentialsId: 'aws', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
            script {
              def rc = sh(returnStatus: true, script: '''
                : "${IMAGE_TAG:=local}"
                docker run --rm \
                  -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_DEFAULT_REGION \
                  -v "${SRC}/terraform:/tf" -w /tf hashicorp/terraform:1.9.5 \
                  sh -lc 'terraform init -input=false -no-color &&
                          terraform plan -input=false -no-color -out=tfplan \
                            -var="backend_image_tag='${IMAGE_TAG}'" \
                            -var="db_image_tag=latest" \
                            -detailed-exitcode'
              ''')
              sh '''
                docker run --rm \
                  -v "${SRC}/terraform:/tf" -w /tf hashicorp/terraform:1.9.5 \
                  terraform show -no-color tfplan || true
              '''
              if (rc == 0) {
                echo 'No changes.'
              } else if (rc == 2) {
                echo 'Changes detected (plan only, not applied).'
                currentBuild.result = 'UNSTABLE'
              } else {
                error 'Terraform plan failed.'
              }
            }
          }
        }
      }

      stage('Push to ECR') {
      agent any
      environment { AWS_DEFAULT_REGION = "${AWS_REGION}" }
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
          script {
            // Need to add some setup

            def rc = sh(returnStatus: true, script: """
              docker tag backend:${IMAGE_TAG}  ${registry}/${ECR_BACKEND}:${IMAGE_TAG}
              docker tag frontend:${IMAGE_TAG} ${registry}/${ECR_FRONTEND}:${IMAGE_TAG}
              docker push ${registry}/${ECR_BACKEND}:${IMAGE_TAG}
              docker push ${registry}/${ECR_FRONTEND}:${IMAGE_TAG}
            """
            ) 
            if (rc != 0) {
              echo 'Failure expected for now, moving on'
            }
          }
        }
      }
    }
  }
  post {
      always  { 
          echo "Tag: ${env.IMAGE_TAG}" 
      }
      success {
          echo "Build and deploy completed successfully."
          // Send a success email?
      }
      failure {
          echo "Build or deployment failed."
          // Send a failure email?
      }
  }
}
